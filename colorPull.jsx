var docRef = app.activeDocument;var numberObjects = docRef.selection.length;/** my object to store hexvalue for comparison, we'll pull out the rgb later **/function hexValues(red, green, blue) {  this.hexValue = rgbToHex(red, green, blue);}/** converting rgb to hexidecimal in two functions **/function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}function toHex(n) { n = parseInt(n,10); if (isNaN(n)) return "00"; n = Math.max(0,Math.min(n,255)); return "0123456789ABCDEF".charAt((n-n%16)/16)      + "0123456789ABCDEF".charAt(n%16);}/** eliminate duplicates and sort the array **/function eliminateDuplicates(arr) {  var i,      len=arr.length,      out=[],      obj={};  for (i=0;i<len;i++) {    obj[arr[i].hexValue]=0;  }  for (i in obj) {    out.push(i);  }  return out;}/** looping through all the objects and retrieving the colors **/var colorArray = [];for ( var i=0; i<numberObjects; i++ ) {   if(docRef.selection[i].strokeColor != null || docRef.selection[i].fillColor != null) {    // stroke color    if (docRef.selection[i].strokeColor.typename == "RGBColor") {           var thisColor = new hexValues(        docRef.selection[i].strokeColor.red,         docRef.selection[i].strokeColor.green,         docRef.selection[i].strokeColor.blue       );      colorArray.push(thisColor);    }    //fill color    if (docRef.selection[i].fillColor.typename == "RGBColor") {      var thisColor = new hexValues(        docRef.selection[i].fillColor.red,         docRef.selection[i].fillColor.green,         docRef.selection[i].fillColor.blue       );      colorArray.push(thisColor);    }   }}uniqueColors = eliminateDuplicates(colorArray);//alert(uniqueColors);var newDoc = app.documents.add();  thisDoc = app.activeDocument;/** printing the hexidecimal values **/for ( var j=0; j<uniqueColors.length; j++) {    var rgbValue = thisDoc.textFrames.add(); // alert(uniqueColors[j]);  rgbValue.position = [40, ((j * 30) + 20)];  rgbValue.contents = "#" + uniqueColors[j];}     